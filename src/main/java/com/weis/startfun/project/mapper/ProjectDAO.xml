<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.weis.startfun.project.model.ProjectDAO">

<!-- 프로젝트 생성 -->
<!-- status - 임시저장 or 접수 | type - 후원 or 투자 -->
<!-- project_no 반환 -->
<insert id="insertProject" parameterType="ProjectVO">
	INSERT INTO PROJECT (project_category, project_title, project_thumbnail, project_video, project_content, project_file, 
						project_start, project_end, project_goal, project_regdate, project_status, project_email, project_type)
	VALUES (#{project_category}, #{project_title, jdbcType=VARCHAR}, #{project_thumbnail, jdbcType=VARCHAR}, 
			#{project_video, jdbcType=VARCHAR}, #{project_content, jdbcType=VARCHAR}, 
			#{project_file, jdbcType=VARCHAR}, #{project_start, jdbcType=DATE}, #{project_end, jdbcType=DATE}, 
			#{project_goal, jdbcType=INTEGER}, now(), #{project_status}, #{project_email, jdbcType=VARCHAR}, #{project_type})
	<selectKey resultType="Integer" keyProperty="project_no" order="AFTER">
		SELECT LAST_INSERT_ID()
	</selectKey>
</insert>


<!-- 후원프로젝트 생성 -->
<insert id="insertSupport" parameterType="SupportVO">
	INSERT INTO SUPPORT (delivery_guide, delivery_delay, refund_policy, address, project_no)
	VALUES (#{delivery_guide, jdbcType=VARCHAR}, #{delivery_delay, jdbcType=VARCHAR}, 
			#{refund_policy, jdbcType=VARCHAR}, #{address, jdbcType=VARCHAR}, #{project_no})
</insert>

<!-- 리워드 생성 -->
<insert id="insertReward" parameterType="com.weis.startfun.project.model.RewardVO">
	INSERT INTO REWARD (reward_compose, reward_price, reward_ship_type, reward_charge, due_date, reward_order, project_no)
	VALUES (#{reward_compose, jdbcType=VARCHAR}, #{reward_price, jdbcType=INTEGER}, 
			#{reward_ship_type, jdbcType=VARCHAR}, #{reward_charge, jdbcType=INTEGER}, 
			#{due_date, jdbcType=DATE}, #{reward_order, jdbcType=INTEGER}, #{project_no, jdbcType=INTEGER})
</insert>

<!-- 투자프로젝트 생성 -->
<insert id="insertInvest" parameterType="InvestVO">
	INSERT INTO INVEST (interest_rate, deposit_date, min_amount, pay_period, expiry_date, project_no)
	VALUES (#{interest_rate, jdbcType=VARCHAR}, #{deposit_date, jdbcType=DATE}, 
			#{min_amount, jdbcType=INTEGER}, #{pay_period, jdbcType=INTEGER}, 
			#{expiry_date, jdbcType=INTEGER}, #{project_no})
</insert>

<!-- 프로젝트 수정 -->
<update id="updateProject" parameterType="ProjectVO">
	UPDATE PROJECT
	<set>
		<if test="project_category != null and !project_category.equals('')">project_category=#{project_category},</if>
		<if test="project_title != null and !project_title.equals('')">project_title=#{project_title},</if>
		<if test="project_thumbnail != null and !project_thumbnail.equals('')">project_thumbnail=#{project_thumbnail},</if>
		<if test="project_video != null and !project_video.equals('')">project_video=#{project_video},</if>
		<if test="project_content != null and !project_content.equals('')">project_content=#{project_content},</if>
		<if test="project_file != null and !project_file.equals('')">project_file=#{project_file},</if>
		<if test="project_start != null and !project_start.equals('')">project_start=#{project_start},</if>
		<if test="project_end != null and !project_end.equals('')">project_end=#{project_end},</if>
		<if test="project_goal != null and !project_goal.equals('')">project_goal=#{project_goal},</if>
		<if test="project_regdate != null and !project_regdate.equals('')">project_regdate=#{project_regdate},</if>
		<if test="project_status != null and !project_status.equals('')">project_status=#{project_status},</if>
		<if test="project_email != null and !project_email.equals('')">project_email=#{project_email},</if>
	</set>
	WHERE PROJECT_NO = #{project_no}
</update>

<!-- 후원프로젝트 수정 -->
<update id="updateSupport" parameterType="SupportVO">
	UPDATE SUPPORT
	<set>
		<if test="delivery_guide != null and !delivery_guide.equals('')">DELIVERY_GUIDE=#{delivery_guide},</if>
		<if test="delivery_delay != null and !delivery_delay.equals('')">DELIVERY_DELAY=#{delivery_delay},</if>
		<if test="refund_policy != null and !refund_policy.equals('')">REFUND_POLICY=#{refund_policy},</if>
		<if test="address != null and !address.equals('')">ADDRESS=#{address},</if>
	</set>
	WHERE PROJECT_NO = #{project_no}
</update>

<!-- 리워드 수정 -->
<update id="updateReward" parameterType="com.weis.startfun.project.model.RewardVO">
	UPDATE REWARD
	<set>
		<if test="reward_compose != null and !reward_compose.equals('')">reward_compose=#{reward_compose},</if>
		<if test="reward_price != null and !reward_price.equals('')">reward_price=#{reward_price},</if>
		<if test="reward_ship_type != null and !reward_ship_type.equals('')">reward_ship_type=#{reward_ship_type},</if>
		<if test="reward_charge != null and !reward_charge.equals('')">reward_charge=#{reward_charge},</if>
		<if test="due_date != null and !due_date.equals('')">DUE_DATE=#{due_date},</if>
		<if test="reward_order != null and !reward_order.equals('')">REWARD_ORDER=#{reward_order},</if>
	</set>
	WHERE REWARD_NO = #{reward_no}
</update>

<!-- 투자프로젝트 수정 -->
<update id="updateInvest" parameterType="InvestVO">
	UPDATE INVEST
	<set>
		<if test="interest_rate != null and !interest_rate.equals('')">INTEREST_RATE=#{interest_rate},</if>
		<if test="deposit_date != null and !deposit_date.equals('')">DEPOSIT_DATE=#{deposit_date},</if>
		<if test="min_amount != null and !min_amount.equals('')">MIN_AMOUNT=#{min_amount},</if>
		<if test="pay_period != null and !pay_period.equals('')">PAY_PERIOD=#{pay_period},</if>
		<if test="expiry_date != null and !expiry_date.equals('')">EXPIRY_DATE=#{expiry_date},</if>
	</set>
	WHERE PROJECT_NO = #{project_no}
</update>

<!-- 프로젝트 select -->
<select id="selectProject" resultType="ProjectVO">
	SELECT project_category, project_title, project_thumbnail, project_video, 
		   project_content, project_file, DATE_FORMAT(project_start, '%Y-%m-%d') as project_start, 
		   DATE_FORMAT(project_end, '%Y-%m-%d') as project_end, project_goal, 
		   DATE_FORMAT(project_regdate, '%Y-%m-%d') as project_regdate, project_status, project_email, project_type
	FROM PROJECT
	WHERE project_no = #{proeject_no}
</select>

<!-- 후원프로젝트 select -->
<select id="selectSupport" resultType="SupportVO">
	SELECT delivery_guide, delivery_delay, refund_policy, address
	FROM SUPPORT
	WHERE project_no = #{proeject_no}
</select>

<!-- 리워드 select -->
<select id="selectReward" resultType="com.weis.startfun.project.model.RewardVO">
 	SELECT reward_no, reward_compose, reward_price, reward_ship_type,
 		   reward_charge, DATE_FORMAT(due_date, '%Y-%m-%d') as due_date, reward_order
 	FROM REWARD
 	WHERE project_no = #{proeject_no}
</select>

<!-- 투자프로젝트 select -->
<select id="selectInvest" resultType="InvestVO">
	SELECT interest_rate, DATE_FORMAT(deposit_date, '%Y-%m-%d') as deposit_date, 
     	   min_amount, pay_period, expiry_date
	FROM INVEST
	WHERE project_no = #{proeject_no}
</select>

<!-- 프로젝트분야 select -->
<select id="selectProjectCategory" resultType="ProjectCategoryVO">
	SELECT category_code, category_name
	FROM PROJECT_CATEGORY
</select>

<!-- 리워드 지우기 -->
<delete id="deleteReward">
	DELETE FROM reward WHERE reward_no = #{reward_no}
</delete>

<!-- 검색 조건 criteria -->
<sql id="criteria">
	<trim suffixOverrides="AND">
		<choose>
			<when test="status == '진행중'">
				project_status = '진행중' AND
				project_start <![CDATA[<=]]> CURRENT_DATE() AND
			</when>
			<when test="status == '승인'">
				project_status = '승인' AND
			</when>
			<otherwise>
				project_status in ('승인', '진행중', '진행완료', '정산요청', '정산완료') AND
				project_start <![CDATA[<=]]> CURRENT_DATE() AND
			</otherwise>
		</choose>
		<choose>
			<when test="type == '후원'">
				project_type = '후원' AND
			</when>
			<when test="type == '투자'">
				project_type = '투자' AND
			</when>
		</choose>
		 <choose>
			<when test="category == '공간/리빙'">
				category_name = '공간/리빙' AND 
			</when>
			<when test="category == '사회이슈'">
				category_name = '사회이슈' AND 
			</when>
			<when test="category == '교육/출판'">
				category_name = '교육/출판' AND 
			</when>
			<when test="category == '문화예술'">
				category_name = '문화예술' AND 
			</when>
			<when test="category == '지역재생'">
				category_name = '지역재생' AND 
			</when>
			<when test="category == '푸드'">
				category_name = '푸드' AND 
			</when>
			<when test="category == '테크'">
				category_name = '테크' AND 
			</when>
			<when test="category == '뷰티/패션'">
				category_name = '뷰티/패션' AND 
			</when>
			<when test="category == '여행'">
				category_name = '여행' AND 
			</when>
		</choose>
	<if test="keyword != null and !keyword.equals('')">
		project_title like CONCAT('%',#{keyword},'%')
	</if>	
	</trim>
</sql>

<!-- join from 절 
<sql id="joinFrom">
	project p
	join member m on p.project_email = m.member_email
	join project_category pc on p.project_category = pc.category_code
	left join join_support js on js.project_no = p.project_no
</sql>
-->

<!-- 제목으로 프로젝트 검색 -->
	<!-- resultMap ProjectVO -->
	<resultMap type="ProjectVO" id="ProjectJOIN">
		<result column="project_no" property="project_no" />
		<result column="project_category" property="project_category" />
		<result column="project_title" property="project_title" />
		<result column="project_thumbnail" property="project_thumbnail" />
		<result column="project_start" property="project_start" />
		<result column="project_end" property="project_end" />
		<result column="project_status" property="project_status" />
		<result column="project_type" property="project_type" />
		<result column="sponsor_count" property="sponsor_count" />
		<result column="rate" property="rate" />
		<result column="total" property="total" />
		<result column="dday" property="dday" />
		<association property="projectCategoryVO" resultMap="ProjectCategoryJOIN" />
		<association property="memberVO" resultMap="MemberJOIN" />
	</resultMap>
	
	<!-- resultMap ProjectCategoryVO -->
	<resultMap type="ProjectCategoryVO" id="ProjectCategoryJOIN">
		<result column="category_name" property="category_name" />
	</resultMap>
	
	<!-- resultMap MemberVO -->
	<resultMap type="MemberVO" id="MemberJOIN">
		<result column="member_name" property="member_name" />
		<result column="member_profile" property="member_profile" />
		<result property="member_company" column="member_company" />
	</resultMap>
	
	<select id="getProjectByTitle" resultMap="ProjectJOIN">
		select 
				p.project_no,
				p.project_thumbnail,
				p.project_title,
				p.project_start, 
			    p.project_end,
			    p.project_status,
			    p.project_type,
			    TO_DAYS(project_end)-TO_DAYS(CURRENT_DATE()) as "dday",
			    count(js.sponsor_email) + count(ji.sponsor_email) as "sponsor_count",
				m.member_name,
				m.member_profile,
				m.member_company,
				pc.category_name,
				ifnull(sum(js.support_amount), 0) + ifnull(sum(js.support_add_amount), 0) + ifnull(sum(ji.invest_amount), 0) as "total",
				truncate( ( (ifnull(sum(support_amount), 0)+ ifnull(sum(support_add_amount), 0) + ifnull(sum(ji.invest_amount), 0)) / project_goal )*100, 0) as "rate"
		from project p
				join member m on p.project_email = m.member_email
				join project_category pc on p.project_category = pc.category_code
				left join join_support js on p.project_no = js.project_no
				left join join_invest ji on p.project_no = ji.project_no
		where
			 <include refid="criteria"></include>
		group by  p.project_no
		order by
	    <choose>
	        <when test="listSort == 'total'">total desc</when>                     
	        <when test="listSort == 'project_end'">p.project_end asc</when>        
	        <when test="listSort == 'project_start'">p.project_start desc</when>   
	        <when test="listSort == 'sponsor_count'">sponsor_count desc</when>         
	        <otherwise>total desc</otherwise>
	    </choose>
	    limit ${startNum}, ${amount}
	</select>
	

	
<!-- 프로젝트 총 개수 -->
<select id="getProjectTotalCount" resultType="int">
	select count(*) 
	from 
		project p
		join project_category pc
		on p.project_category = pc.category_code
	where 
		<include refid="criteria"></include>
</select>	

</mapper>